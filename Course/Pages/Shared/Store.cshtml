@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<style>
    .item2 {
        grid-area: menu;
    }

    .item3 {
        grid-area: main;
    }

    .grid-container {
        display: grid;
        grid-template-areas: 'header header header header header header' 'menu main main main right right' 'menu footer footer footer footer footer';
        grid-gap: 10px;
        padding: 10px;
    }

    .card {
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
        transition: 0.3s;
        display: flex;
        width: 90%;
        margin: 5px
    }

    .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
    }

    .container {
        padding: 2px 16px;
    }

</style>

<h2>Store</h2>
<ul id="lisOfPare"></ul>
<div style="display: flex">
    <button id="priceButton"> Buy </button>
    <h4 style = "display: flex; margin-left: 30px">Total: <div id= 'totalPrice'></div> USD </h4>
</div>


<script>
    const getCard = (artile) => {
        const card = document.createElement('div');
        card.className = 'card';
        const img = getImg(artile);
        card.appendChild(img);
        const container = getContainer(artile);
        card.appendChild(container);
        return card;
    }

    const getContainer = (article) => {
        const container = document.createElement('div');
        container.className = 'container';
        const title = getTitle(article.nameSpare, article.price);
        container.appendChild(title);
        const description = getDescription(article.description);
        container.appendChild(description);
        container.appendChild(getButon(article));
        return container;
    }

    const getButon = (spare) => {
        const button = document.createElement('button');
        button.onclick = (e) => {
            e.preventDefault();
            
            const form = {
                spareId: spare.id,
            };

            const config = {
                  method: "POST",
                  headers: { "Content-Type": "application/json"},
                  body: JSON.stringify(form),
            };
            fetch("/api/corb/delete", config);
        }
        button.appendChild(document.createTextNode("Drop from store"))
        return button;
    }

    const getTitle = (title, price) => {
        const h4 = document.createElement('h4');
        const b = document.createElement('b');
        const text = document.createTextNode(title);
        const priceText = document.createTextNode(" " + price+ " USD. ");
        b.appendChild(text);
        h4.appendChild(b);
        h4.appendChild(priceText);
        return h4;
    }

    const getDescription = (description) => {
        const p = document.createElement('p');
        const text = document.createTextNode(description);
        p.appendChild(text);
        return p;
    }

    const getImg = (artile) => {
        const img = document.createElement('img');
        img.src = artile.photo;
        img.alt = artile.nameSpare;
        img.style.width = '20%';
        img.style.height = '150px';
        return img;
    }

    const fetchSpare = async () => {
       return fetch("/api/corb").then((x) => x.json() );
    }

    function drawSpare (spares) {
        const listOdPare = document.getElementById("lisOfPare");
        for (let i = 0; i < spares.length; i++){
            listOdPare.appendChild(getCard(spares[i]));
        }
    }

    const fetchSpareAndDraw = async () => {
        const spares = await fetchSpare();
        
        const totalPrice = document.getElementById('totalPrice');
        
        let price = 0;

        spares.forEach((spare) => {
            price += spare.price; 
        })
        totalPrice.appendChild(document.createTextNode(price));
        drawSpare(spares);
    }
    
    document.getElementById("priceButton").onclick = (e) => {
        e.preventDefault();
        fetch("/api/corb/buy");
    }
    
    fetchSpareAndDraw();
</script>